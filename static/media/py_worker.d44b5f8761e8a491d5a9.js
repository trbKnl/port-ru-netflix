let pyScript;function runCycle(e){console.log("[ProcessingWorker] runCycle "+JSON.stringify(e));try{scriptEvent=pyScript.send(e),self.postMessage({eventType:"runCycleDone",scriptEvent:scriptEvent.toJs({create_proxies:!1,dict_converter:Object.fromEntries})})}catch(o){self.postMessage({eventType:"runCycleDone",scriptEvent:generateErrorMessage(o.toString())})}}function unwrap(e){console.log("[ProcessingWorker] unwrap response: "+JSON.stringify(e.payload));const o="/file-input";return new Promise((n=>{switch(e.payload.__type__){case"PayloadFile":const t=e.payload.value;copyFileToPyFS([t],o),n({__type__:"PayloadString",value:"".concat(o,"/").concat(t.name)});break;case"PayloadFileArray":const s=[],r=e.payload.value;for(const e of r)s.push("".concat(o,"/").concat(e.name));copyFileToPyFS(r,o),n({__type__:"PayloadStringArray",value:s});break;default:n(e.payload)}}))}function copyFileToPyFS(e,o){self.pyodide.FS.analyzePath(o).exists?self.pyodide.FS.unmount(o):self.pyodide.FS.mkdir(o),self.pyodide.FS.mount(self.pyodide.FS.filesystems.WORKERFS,{files:e},o)}function initialise(){return console.log("[ProcessingWorker] initialise"),startPyodide().then((e=>(self.pyodide=e,loadPackages()))).then((()=>installPortPackage()))}function startPyodide(){return importScripts("https://cdn.jsdelivr.net/pyodide/v0.24.0/full/pyodide.js"),console.log("[ProcessingWorker] loading Pyodide"),loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.24.0/full/"})}function loadPackages(){return console.log("[ProcessingWorker] loading packages"),self.pyodide.loadPackage(["micropip","numpy","pandas"])}function installPortPackage(){return console.log("[ProcessingWorker] load port package"),self.pyodide.runPythonAsync('\n    import micropip\n    await micropip.install("../../port-0.0.0-py3-none-any.whl", deps=False)\n    import port\n  ')}function generateErrorMessage(e){return{__type__:"CommandUIRender",page:{__type__:"PropsUIPageError",stacktrace:e}}}onmessage=e=>{const{eventType:o}=e.data;switch(o){case"initialise":initialise().then((()=>{self.postMessage({eventType:"initialiseDone"})}));break;case"firstRunCycle":pyScript=self.pyodide.runPython("port.start(".concat(e.data.sessionId,")")),runCycle(null);break;case"nextRunCycle":const{response:n}=e.data;unwrap(n).then((e=>{runCycle(e)}));break;default:console.log("[ProcessingWorker] Received unsupported event: ",o)}};